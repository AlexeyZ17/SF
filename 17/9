numbers = input('Введите целые числа через пробел: ')
user_number = int(input('Введите число: '))

def is_int(str):                  # Определение цифр в строке
    str = str.replace(' ', '')
    try:
        int(str)
        return True
    except ValueError:
        return False

if " " not in numbers:            # П.1 Проверка соответствия условию ввода чисел.
    print("\nОшибка: введите числа через пробел)")
    numbers = input('Введите целые числа через пробел: ')
if not is_int(numbers):
    print('\nОшибка: введите целое число.)\n')
    print(error)
else:
    numbers = numbers.split()

list_numbers = [int(item) for item in numbers]

def merge_sort(L):
    if len(L) < 2:
        return L[:]
    else:
        middle = len(L) // 2
        left = merge_sort(L[:middle])
        right = merge_sort(L[middle:])
        return merge(left, right)

def merge(left, right):            # П.2 Сортировка списка чисел
    result = []
    i, j = 0, 0

    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1

    while i < len(left):
        result.append(left[i])
        i += 1

    while j < len(right):
        result.append(right[j])
        j += 1
    return result

list_numbers = merge_sort(list_numbers)

def binary_search(array, element, left, right):         # П.3 Установка позиции числа
    try:
        if left > right:
            return False
        middle = (right + left) // 2
        if array[middle] == element:
            return middle
        elif element < array[middle]:
            return binary_search(array, element, left, middle - 1)
        else:
            return binary_search(array, element, middle + 1, right)
    except IndexError:
        return 'Ошибка: число вне диапазона'

print(f'Список по возрастанию: {list_numbers}')

if not binary_search(list_numbers, user_number, 0, len(list_numbers)):
    rI = min(list_numbers, key=lambda x: (abs(x - user_number), x))
    index = list_numbers.index(rI)
    max_index = index + 1
    min_index = index - 1
    if rI > user_number:
        print(f'''В списке нет введенного числа
Рядом большее число: {rI}, индекс: {list_numbers.index(rI)}
Рядом меньшее число: {list_numbers[min_index]} индекс: {min_index}''')
    elif min_index < 0:
        print(f'''В списке нет введенного числа
Рядом большее число: {rI}, индекс: {list_numbers.index(rI)}
В списке нет меньшего числа''')
    elif list_numbers.index(rI) == 0:
        print(f'Индекс числа: {list_numbers.index(rI)}')
else:
    print(f'Индекс числа: {binary_search(list_numbers, user_number, 0, len(list_numbers))}')
